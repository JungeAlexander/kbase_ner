{"source": "Sponsored by Datadog: pythonbytes.fm/datadog\nBrian #1: Why Senior Devs Write Dumb Code\n\n\u201cAny fool can write code that a computer can understand. Good programmers write code that humans can understand.\u201d - Kent Beck\nCode that is clean, straightforward, obvious, and easy to read actually takes practice to achieve.\nFollow principles like YAGNI, Singe Responsibility, DRY, etc.\nAvoid clever one-liners, weird abstractions.\nEsoteric language features.\nCode needs to be readable and easily understood while under time and stress pressure.\n\nMichael #2: GeoAlchemy 2\n\nGeoAlchemy 2 provides extensions to SQLAlchemy for working with spatial databases.\nGeoAlchemy 2 focuses on PostGIS. Aims to be simpler than its predecessor, GeoAlchemy.\nUsing it:\n\nConnect (e.g. Postgres)\nDeclare a Mapping\n\n\n    class Lake(Base):\n         __tablename__ = 'lake'\n         id = Column(Integer, primary_key=True)\n         name = Column(String)\n         geom = Column(Geometry('POLYGON'))\n\n\nCreate a table (via the engine)\nCreate an Instance of the Mapped Class\nInserts like standard SQLAlchmey\nSpatial Query\n\n    from sqlalchemy import func\n    query = session.query(Lake).filter(\n             func.ST_Contains(Lake.geom, 'POINT(4 1)'))\n\n    query = session.query(Lake.name,\n          Lake.geom.ST_Buffer(2).ST_Area().label('bufferarea'))\n\nBrian #3: QtPyConvert\n\nAn automatic Python Qt binding transpiler to the Qt.py abstraction layer.\nQtPyConvert supports the following bindings out of the box:\n\nPyQt4\nPySide\nPyQt5\nPySide2\n\nConversions leave code comments in place, with the help of RedBaron\nConverts to Qt.py\n\nMinimal Python 2 & 3 shim around all Qt bindings - PySide, PySide2, PyQt4 and PyQt5\n\n\nMichael #4: You Don't Have To Be a Workaholic To Win: 13 Alternative Ways To Stand Out\n\nDo we have to kill ourselves to get ahead?\nDon\u2019t busy-brag\nMax Q analogy\nThe tips\nCreativity\nStubbornness\nCuriosity\nKindness\nPlanning\nImprovisation\nEnthusiasm\nCommunication\nPresence\nCollaboration\nWillingness\nPatience\nInstitutional Knowledge\n\nBrian #5: RedBaron\n\nRedBaron is a python library to make the process of writing code that modify source code as easy and as simple as possible. \n\nwriting custom refactoring, generic refactoring, tools, \n\nUsed by QtPyConvert to achieve the conversion while leaving code comments in place\nUses the full syntax tree, FST. Like an AST, but keeps all information, including comments and formatting.\npossible uses:\n\nrename a variable in a source file... without clashing with things that are not a variable (example: stuff inside a string)\ninline a function/method\nextract a function/method from a series of line of code\nsplit a class into several classes\nsplit a file into several modules\nconvert your whole code base from one ORM to another\ndo custom refactoring operation not implemented by IDE\n\n\nMichael #6: Project Beeware AppStore\n\nProject BeeWare has just released its first iPhone app made in Python using its Briefcase tool.\nSimple travel app for currency and tip calculations\nBriefcase: A distutils extension to assist in packaging Python projects as standalone applications.\nBriefcase is a tool for converting a Python project into a standalone native application. You can package projects for:\n\nMac\nWindows\nLinux\niPhone/iPad\nAndroid\nAppleTV\ntvOS\n\nWhile there are other Python GUI toolkits aiming to enable Python developers to build and deploy iOS apps, like for instance the very nice Pythonista app, the BeeWare project is a bit different because it aims at cross-platform compatibility and native widgets with a set of different tools, like Briefcase and Toga.\n\nExtras: \n\nMichael: Extra ssh breach Did you see that?  https://www.reddit.com/r/Python/comments/8hvzja/backdoor_in_sshdecorator_package/\nPyCon videos already up at https://www.youtube.com/pycon2018\n"}
{"source": "Sponsored by DigialOcean -- pythonbytes.fm/digitalocean\nBrian #1: Python Patterns\n\n@brandon_rhodes vs GOF\n\nMichael #2: Arctic: Millions of rows a sec (time data)\n\nArctic is a high-performance datastore for numeric data. It supports Pandas, numpy arrays and pickled objects out-of-the-box, with pluggable support for other data types and optional versioning.\nArctic can query millions of rows per second per client, achieves ~10x compression on network bandwidth, ~10x compression on disk, and scales to hundreds of millions of rows per second per MongoDB instance.\nArctic has been under active development at Man AHL since 2012.\nSuper fast, some latency numbers:\n\n1xDay Data 4ms for 10k rows, vs 2,210 ms from SQL Server)\nTick Data 1s for 3.5 MB (Python) or 15 MB (Java) vs 15-40sec from \u201cother tick\u201d\n\nVersioned data\nBuilt on MongoDB\nSlides\nBased on pandas\nTested with pytest\n\nBrian #3: PyCon Australia videos\n\nHow To Publish A Package On PyPI\n\nMark Smith @judy2k\n\n\n\nMichael #4: GAE: Introducing App Engine Second Generation runtimes and Python 3.7\n\nToday, Google Cloud is announcing the availability of Second Generation App Engine standard runtimes, a significant upgrade to the platform that allows you to easily run web apps using up-to-date versions of popular languages, frameworks and libraries.\nPython 3.7 is one of the new Second Generation runtimes that we announced at Cloud Next. \nBased on technology from the gVisor container sandbox, these Second Generation runtimes eliminate many previous App Engine restrictions, giving you the ability to write portable web apps and microservices that take advantage of App Engine's unique auto-scaling, built-in security and pay-per-use billing model.\nThis new runtime allows you to take advantage of Python's vibrant ecosystem of open-source libraries and frameworks. While the Python 2 runtime only allowed the use of specific versions of whitelisted libraries, Python 3 supports arbitrary third-party libraries, including those that rely on C code and native extensions. Just add Django 2.0, NumPy, scikit-learn or your library of choice to a requirements.txt file. App Engine will install these libraries in the cloud when you deploy your app.\n\nBrian #5: I don\u2019t like notebooks\n\n@joelgrus\n\nMichael #6: PEP 8000 -- Python Language Governance Proposal Overview\n\nThis PEP provides an overview of the selection process for a new model of Python language governance in the wake of Guido's retirement. Once the governance model is selected, it will be codified in PEP 13.\nPEPs in the lower 8000s describe the general process for selecting a governance model.\n\nPEP 8001 - Python Governance Voting Process\nPEP 8002 - Open Source Governance Survey\n\nPEPs in the 8010s describe the actual proposals for Python governance. \n\nPEP 8010 - The BDFL Governance Model\nPEP 8011 - The Council Governance Model\nPEP 8012 - The Community Governance Model\n\n\nExtras\n\nFree Brian Granger ACM webcast on Jupyter Friday\nTIOBE jump to #3: https://www.tiobe.com/tiobe-index/\n"}
{"source": "What do you focus on once you've learned the core concepts of the Python programming language and ecosystem?  \n\n\nObviously, knowing a few fundamental packages in your space is critical. If you're a web developer, you should probably know flask or pyramid, and sqlalchemy really well. If you're a data scientist, import pandas, numpy, matplotlib need to be something you type often and intuitively.\n\n\nBut then what? Well I have a few topics for you! This week you'll meet Mark Summerfield, prolific author of many Python books. We spend time digging into the ideas behind his book Python in Practice: Create Better Programs Using Concurrency, Libraries, and Patterns. \n\n\nWhat I really like about these topics is that they have a \"long shelf life\". You find them relevant over time even as frameworks come and go.\n\n\nLinks from the show:\n\n\n\nMark on the web:  qtrac.eu\n\n\nBooks:\n\nPython in Practice: Create Better Programs Using Concurrency, Libraries, and Patterns:  \n\namzn.to/1SMkk4n\n\nProgramming in Python 3: A Complete Introduction to the Python Language:  \n\namzn.to/24quCP1\n\nRapid GUI Programming with Python and Qt: The Definitive Guide to PyQt:  \n\namzn.to/1TlYHUk\n\nAdvanced Qt Programming: Creating Great Software with C++ and Qt 4:  \n\namzn.to/1SMkpVr\n\nProgramming in Go: Creating Applications for the 21st Century:  \n\namzn.to/1TlYO28\n\nAdvanced Python 3 Programming Techniques:  \n\namzn.to/1SMkvwp\n\nProgramming in Python 3: A Complete Introduction to the Python Language:  \n\namzn.to/24quYF2\n\n\nPackages:\n\nAPSW package:  rogerbinns.github.io/apsw\n\ncx_freeze:  cx-freeze.sourceforge.net\n\npywin32:  sourceforge.net/projects/pywin32\n\nroman package:  pypi.python.org/pypi/roman\n\nwmi package:  timgolden.me.uk/python/wmi\n\nRecords: SQL for Humans:  \n\nkennethreitz.org/essays/introducing-records-just-write-sql\n\n\nExtras:\n\nMichael's episode on Away From The Keyboard pocdast:\n\nawayfromthekeyboard.com\n\nUpdated course / player:\n\ntalkpython.fm/course\n\n\nSponsors\n\nTalk Python Training\nGoCD"}
{"source": "Did you come to software development outside of traditional computer science? This is common, and even how I got into programming myself. I think it's especially true for data science and scientific computing. That's why I'm thrilled to bring you an episode with Daniel Chen about maintainable data science tips and techniques.\n\nLinks from the show\n\nDaniel on Twitter: @chendaniely\nPandas for Everyone book: amazon.com\npyprojroot project: github.com\nPyopensci: pyopensci.org\n\nJenny Bryan naming things: speakerdeck.com\n\nJenny Bryan\u2019s code smells:\nTalk: youtube.com\nSlides: speakerdeck.com\n\n3 papers that are highly relevant papers:\nA Quick Guide to Organizing Computational Biology Projects: journals.plos.org\nBest Practices for Scientific Computing: plos.org\nGood enough practices in scientific computing: plos.org\nSponsors\n\nIndeed\nRollbar\nTalk Python Training"}
{"source": "Has anyone told you that you should get into data science? Have you heard it's a great career? In fact, data scientist is the best job in America according to Glassdoor's 2018 rankings. \n\n\nThat's great. But how do you get a career in data science? Once you land that first job, how do you find the right fit? How do you find the right company? And how do you get more deeply involved in the community?\n\n\nI have brought two great guests, both highly successful data scientists, on the show today who have been thinking deeply about this. Jacqueline Nolis and Emily Robinson are here to give you real-world, actionable advice on getting into this rewarding career.\n\nGuests\n\nJacqueline Nolis (left) and Emily Robinson (right)\n\nLinks from the show\n\nEmily on Twitter: @robinson_es\nJacqueline on Twitter: @skyetetra\n\nData Science Careers book (choose your version!)\nProfessional: datascicareer.com\nCool: bestbook.cool\n\nBook discount code at Manning: podtalkpython19\n\nJacqueline\u2019s offensive license plate project: github.com\nEmily\u2019s Pok\u00e9mon project: hookedondata.org\nPyJanitor package: pyjanitor.readthedocs.io\nMissingNo package: github.com\nSponsors\n\nKite AI Autocomplete\nLinode\nTalk Python Training"}
{"source": "Jupyter notebooks have transformed the way many developers and data scientists do their jobs. They offer a platform to not just explore but to explain data and computation. \n\n\nBut how are they *really* being used? Adam Rule is here to describe his research (and Ph.D. dissertation) which analyzed over 1M Juypter notebooks found in the wild.\n\nLinks from the show\n\nAdam Rule: adamrule.com\n1 Million Notebooks Paper (official): dl.acm.org\n1 Million Notebooks Paper (pre-print): adamrule.com/files\nAnalysis Notebooks for Paper: github.com/\nDataset for Paper: library.ucsd.edu\nAtlantic Article - The Scientific Paper is Obsolete: theatlantic.com\nSponsors\n\nLinode\nStudio 3T\nTalk Python Training"}
{"source": "Sponsored by DigitalOcean: pythonbytes.fm/digitalocean\nBrian #1: the state of type hints in Python\n\n\u201cTherefore, type hints should be used whenever unit test are worth writing.\u201d\nType hints, especially for function arguments and return values, help make your code easier to read, and therefore, easier to maintain.\nThis includes refactoring, allowing IDEs to help with code completion, and allow linters to find problems.\nFor CPython\n\nNo runtime type inference happens.\nNo performance tuning allowed. \nOf course, third party packages are not forbidden to do so.\n\nNon-comment type annotations are available for functions in 3.0+\nVariable annotations for 3.6+\nIn 3.7, you can postpone evaluation of annotations with:\nfrom __future__ import annotations\nInterface stub files .pyi files, are allowed now, but this is extra work and code to maintain.\n\ntypeshed has types for standard library plus many popular libraries.\n\nHow do deal with multiple types, duck typing, and more discussed.\nA discussion of type generation and checking tools available now, including mypy\nSee also: Stanford Seminar - Optional Static Typing for Python - Talk by  Guido van Rossum\n\nInteresting discussion that starts with a bit of history of where mypy came from.\n\n\nMichael #2: Django MongoDB connector\n\nVia Robin on Twitter\nUse MongoDB as the backend for your Django project, without changing the Django ORM.\nUse Django Admin to access MongoDB\nUse Django with MongoDB data fields: Use MongoDB embedded documents and embedded arrays in Django Models.\nConnect 3rd party apps with MongoDB: Apps like Django Rest Framework and Viewflow app that use Django Models integrate easily with MongoDB.\nRequirements:\n\nPython 3.6 or higher.\nMongoDB 3.4 or higher.\n\nExample\n\ninner_qs = Blog.objects.filter(name__contains='Ch').values('name')\nentries = Entry.objects.filter(blog__name__in=inner_qs)\n\nBrian #*3: Python Idioms: Multiline Strings*\n\nor \u201cHow I use dedent\u201d\nExample:\n\n    def create_snippet():\n        code_snippet = textwrap.dedent(\"\"\"\\\n            int main(int argc, char* argv[]) {\n                return 0;\n            }\n        \"\"\")\n        do_something(code_snippet)\n\nMichael #4: Flaskerizer\n\nA program that automatically creates Flask apps from Bootstrap templates \nBootstrap templates from websites like https://Bootstrapmade.com/ and https://startBootstrap.com are a fast way to get very dynamic website up and running\nBootstap templates typically don't work \"out of the box\" with the python web framework Flask and require some tedious directory building and broken link fixing before being functional with Flask. \nThe Flaskerizer automates the necessary directory building and link creation needed to make Bootstrap templates work \"out of the box\" with Flask. \nQueue black turtleneck!\n\nBrian #*5: Learn Python the Methodical Way\n\nFrom the article: \n\nMake your way through a tutorial/chapter that teaches you some discrete, four-to-six-step skill.\nWrite down those steps as succinctly and generically as possible.\nPut the tutorial/chapter and its solutions away.\nBuild your project from scratch, peeking only when you\u2019re stuck.\nErase what you built.\nDo the project again.\nDrink some water.\nErase what you built and do it again.\nA day or two later, delete your work and do it again \u2013 this time without peeking even once.\nErase your work and do it again.\n\nThe notion of treating code like you treat creative writing with rough drafts and sometimes complete do-overs is super liberating. \nYou\u2019ll be surprised how fast you can do something the second time, the third time, the fourth time. And it\u2019s very gratifying.\n\nMichael #6: PixieDebugger\n\nThe Visual Python Debugger for Jupyter Notebooks You\u2019ve Always Wanted\nJupyter already supports pdb for simple debugging, where you can manually and sequentially enter commands to do things like inspect variables, set breakpoints, etc.\nCheck out the video to get a good idea of its usage: https://www.youtube.com/watch?v=Z-tPeEkVqjk\n"}
{"source": "Design has become a critical element in software. Back in the 90's, it was fine to produce or sell \"battleship grey\" apps that worked by did not do much to delight. Today, design is table stakes. And knowing how to design applications yourself and work with designers is a key still. \n\n\nThis episode, you'll meet James Stone who straddles that gap between developers and designers (he's both). He has a bunch of tips for improving your design skills as well as working with designers.\n\nLinks from the show\n\nJames on Twitter: @JAMESSTONEco\n\nJames' page Design for Python devs: jamesstone.com/python-css-frameworks\n\nSketch App (design tool): sketchapp.com\nZeplin.io (auto redlining tool): zeplin.io\nSympli.io (auto redlining tool): sympli.io\nAvocode.com (auto redlining tool): avocode.com\nUncss (remove all unused css): github.com/giakki/uncss\nZURB Style Sherpa (note: this can be used with any framework, ZURB Foundation, Bootstrap, or your own code): foundation.zurb.com/sites/docs/style-sherpa.html\nZURB Template - basically a huge amount of Gulp.js based front-end tooling for rapid prototyping of front-end code: foundation.zurb.com/sites/docs/starter-projects.html\nLorem Ipsum for Hipsters: hipsum.co\nSnowflake Stories (character builder - click randomizer): snowflakestories.com\nDesign principles for developers course: lauraelizabeth.co\nSponsors\n\nLinode\nGoCD\nTalk Python Training"}
{"source": "Are you a web developer who uses Flask? It has become the most popular Python web framework. Even if you have used it for years, I bet we cover at least one thing that will surprise you and make your Flask code better. \n\n\nJoin me as I speak with Miguel Grinberg about his top 10 list for tips and tricks in the Flask world. They're great!The 10 tips      No need to use jsonify anymore           Do not store sensitive information in the user session       Using a .env file for secrets - python-dotenv       Windows laptops and Chromebooks are both great Python/Flask development machines with their Linux emulation       Differences between App context and Request context       Flask outside of a web server (Celery workers, cron jobs, etc.)        Use https://github.com/TypeError/secure.py       Use httpie instead of curl to send requests to your app       Flask for asyncio: Quart https://pgjones.gitlab.io/quart/       Greenlet frameworks (gevent, eventlet) and Flask       Blueprints\n\nLinks from the show\n\nMiguel on Twitter: @miguelgrinberg\nMiguel's blog: blog.miguelgrinberg.com\n\npython-dotenv package: pypi.org\nhttpie package: httpie.org\nQuart: pgjones.gitlab.io\nTalk Python episode on Quart: talkpython.fm\nsecure.py package: github.com\nSponsors\n\nSentry Error Monitoring, Code TALKPYTHON\nLinode\nTalk Python Training"}
{"source": "In this show we speak with Jesse Davis from MongoDB. Jesse is the maintainer for a number of popular open-source projects including the Python MongoDB driver known as PyMongo and Mongo C (for C/C++ developers, yes you read right! C developers). Jesse discusses how interesting it is to write both Python and C code and how it reawakens part of the brain.\n\n\nYou'll learn a little about MongoDB, how it compares to RDBMSes as well as other NoSQL data stores.\n\n\nJoin Michael and Jesse for these great topics and much more!\n\n\nLinks from the show:\n\n\n\nM101P, MongoDB for Python Programmers: \n\nhttps://university.mongodb.com/courses/M101P/about\n\n\nJesse's Blog: \n\nhttp://emptysqua.re/\n\n\nPyMongo: \n\nhttps://api.mongodb.org/python/current\n\n\nMotor: \n\nhttps://motor.readthedocs.org\n\n\nToro: \n\nhttps://toro.readthedocs.org\n\n\n\nSponsors\n\nPython Gear\nTalk Python Training"}
{"source": "It's the end of the year and many of you are probably kicking and taking it easy without a TPS report to be seen. So we'll keep this fun and lighthearted this week. We've teamed up with the Partially Derivative podcast and we're running down the top 10 data science stories of 2015 in this joint episode. \n\n\nLinks from the show:\n\n\n\nJonathon Morgan:  \n\ngoodattheinternet.com\n\n@jonathonmorgan\n\nPartially Derivative Podcast:  partiallyderivative.com\n\nPopily Private Beta:  popily.com\n\n\n#1 You\u2019ll Never Keep Your New Year\u2019s Resolutions: \n\nfivethirtyeight.com/datalab/how-fast-youll-abandon-your-new-years-resolutions\n\n\n#2 Serial: Superfans Solve with Stats:  \n\nfivethirtyeight.com/features/the-superfans-using-stats-to-get-to-the-bottom-of-serial\n\n\n#3 $6M funding for Jupyter / IPython:  \n\nblog.jupyter.org/2015/07/07/jupyter-funding-2015\n\n\n#4 All of a Sudden People Freak Out About AI:  \n\ncnet.com/news/artificial-intelligence-experts-sign-open-letter-to-protect-mankind-from-machines\n\nMario with sentience:  mashable.com/2015/01/19/super-mario-artificial-intelligence\n\nMario video:  youtu.be/AplG6KnOr2Q\n\n\n#5 Our Gates Were Deflated:  slate.com\n\n\n#6 The US gets its first Chief Data Scientist:  \n\ngigaom.com/2015/02/05/dj-patil-has-joined-the-white-house-to-wrangle-data-issues\n\nOpen-Source Society (PyOhio 2015 keynote):  \n\npyvideo.org/video/3671/keynote-by-catherine-devlin\n\n\n#7 Winter is Coming. Probably - Bayesian analysis and GoT:  \n\nallendowney.blogspot.com/2015/03/bayesian-survival-analysis-for-game-of.html\n\nThe War Of The Five Kings, A Dataset:  \n\ngithub.com/chrisalbon/war_of_the_five_kings_dataset\n\n\n#8 Microsoft Offends Everyone by Guessing How Old We Are:  how-old.net\n\n\n#9 The Biggest Political Science Study of the Year...Was a Fraud:  \n\nvox.com/2015/5/20/8630535/same-sex-marriage-study\n\nThe Big Sort: Why the Clustering of Like-Minded America Is Tearing Us Apart:  \n\namzn.to/1miT8gA\n\n\n#10 Python jumps to all time high in popularity:  \n\ntiobe.com/index.php/content/paperinfo/tpci/\n\n\nSponsors\n\nTalk Python Training\nDigitalOcean"}
{"source": "Brought to you by Datadog: pythonbytes.fm/datadog\nBrian #1: Voil\u00e0!\n\n\u201cfrom Jupyter notebooks to standalone applications and dashboards\u201d\nTurn a notebook into a web app with:\n\ncustom widgets\nrunnable code (but not editable)\ninteractive plots\ndifferent custom grid layouts\ntemplates\n\n\nMichael #2: Toward a \u201cKernel Python\u201d\n\nBy Glyph\nGlyph wants to Marie Kond\u014d the standard library (and I think I agree with him)\nWe have PEP 594 for removing obviously obsolete and unmaintained detritus from the standard library.\nPEP 594 is great news for Python, and in particular for the maintainers of its standard library, who can now address a reduced surface area.\nBelieves the PEP may be approaching the problem from the wrong direction.\nOne \u201cdead\u201d battery is the colorsys module: why not remove it? \u201cThe module is useful to convert CSS colors between coordinate systems. Today, however, the modules you need to convert colors between coordinate systems are only a pip install away.\nEvery little bit is overhead for the core devs, consider the state of PRs\nLooking at CPython\u2019s keyword-based review queue, we can see that there are 429 tickets currently awaiting review. The oldest PR awaiting review hasn\u2019t been touched since February 2, 2018, which is almost 500 days old.\nBy Glyph\u2019s subjective assessment, on this page of 25 PRs, 14 were about the standard library, 10 were about the core language or interpreter code\nWe need a \u201ckernel\u201d version of Python that contains only the most absolutely minimal library, so that all implementations can agree on a core baseline that gives you a \u201cpython\u201d\nMichael: There will be a cost to beginners. But there is already.\n\nBrian #3: Use __main__.py\n\nI didn\u2019t know it was that easy to get python -m [HTML_REMOVED]  to work.\n\nMichael #4: The CPython Bytecode Compiler is Dumb\n\nby Chris Wellons\nGiven multiple ways to express the same algorithm or idea, Chris tends to prefer the one that compiles to the more efficient bytecode.\nFortunately CPython, the main and most widely used implementation of Python, is very transparent about its bytecode. It\u2019s easy to inspect and reason about its bytecode. The disassembly listing is easy to read and understand.\nOne fact has become quite apparent: the CPython bytecode compiler is pretty dumb. With a few exceptions, it\u2019s a very literal translation of a Python program, and there is almost no optimization.\nDarius Bacon points out that Guido van Rossum himself said, \u201cPython is about having the simplest, dumbest compiler imaginable.\u201d So this is all very much by design.\nThe consensus seems to be that if you want or need better performance, use something other than Python. (And if you can\u2019t do that, at least use PyPy.) \u2190 Cython people, Cython.\nExample\n\n    def foo():\n        x = 0\n        y = 1\n        return x\n\nCould easily be:\n    def foo():\n        return 0\n\nYet, CPython completely misses this optimization for both x and y:\n      2           0 LOAD_CONST               1 (0)\n                  2 STORE_FAST               0 (x)\n      3           4 LOAD_CONST               2 (1)\n                  6 STORE_FAST               1 (y)\n      4           8 LOAD_FAST                0 (x)\n                 10 RETURN_VALUE\n\nAnd so on.\n\nBrett Cannot has expressed performance as a major focus for CPython, maybe there is something here?\n\nBrian #5: You can play with EdgeDB now, maybe\n\nA Path to a 10x Database\nEdgeDB roadmap\nAlpha 1 is available. \n\u201cEdgeDB is the next generation relational database based on PostgreSQL. It features a novel data model and an advanced query language.\u201d\nI\u2019m excited about what their doing. Looking forward to 1.0.\nLots of great features listed in the 10x post, but what I\u2019m most intrigued by is their replacement of SQL with a different query language.\n\nMichael #6: 16 Python libraries that helped a healthcare startup grow\n\nvia Waqas Younas\nWorked with a U.S.-based healthcare startup for 7 years. This startup developed a software product that sent appointment reminders to the patients of healthcare facilities; the reminders were sent via email, text, and IVR.\n\n\nParamiko - A Python implementation of SSHv2.\nbuilt-in CSV module\nSQLAlchemy - The Python SQL Toolkit and Object Relational Mapper\nRequests - HTTP for Humans\u2122\nBeautifulSoup - Python library for pulling data out of HTML and XML files.\ntestscenarios - a pyunit extension for dependency injection\nHL7 - a simple library for parsing messages of Health Level 7 (HL7) version 2.x into Python objects. \nPython-Phonenumbers - Library for parsing, formatting, and validating international phone numbers\ngevent - a coroutine -based Python networking library that uses greenlet to provide a high-level synchronous API on top of the libev or libuv event loop.\ndateutil - powerful extensions to datetime (pip install python-dateutil)\nMatplotlib - a Python 2D plotting library which produces publication quality figures\npython-magic - a python interface to the libmagic file type identification library. libmagic identifies file types by checking their headers according to a predefined list of file types.\nDjango - a high-level Python Web framework that encourages rapid development and clean, pragmatic design\nBoto - a Python package that provides interfaces to Amazon Web Services.\nMailgun Python bindings - helped us send appointment reminders seamlessly\nTwilio\u2019s Python bindings - helped us send appointment reminders seamlessly\n\nExtras\nMichael:\nUnited States Digital Service\nJokes \nDifference between ML & AI? Ans."}
{"source": "Sponsored by us! Support our work through:\n\nOur courses at Talk Python Training\nBrian\u2019s pytest book\n\nMichael #1: sidetable - Create Simple Summary Tables in Pandas \n\nby Chris Moffitt\nMakes it easy to build a frequency table and simple summary of missing values in a DataFrame.\nExample without and with\n\nA useful tool when starting data exploration on a new data set\nAt its core, sidetable is a super-charged version of pandas value_counts with a little bit of crosstab mixed in.\nWith sidetable is imported, you have a new accessor on all your DataFrames - stb that you can use to build summary tables.\n\nBrian #2: tabulate\n\nsuggested by Tom McDermott\nPretty-print tabular data in Python, a library and a command-line utility.\n\n    from tabulate import tabulate\n\n    table = [[\"Sun\",696000,1989100000],\n             [\"Earth\",6371,5973.6],\n             [\"Moon\",1737,73.5],\n             [\"Mars\",3390,641.85]]\n    headers=[\"Planet\",\"R (km)\", \"mass (x 10^29 kg)\"]\n    table_str = tabulate(table, headers=headers)\n    print(table_str)\n\n    Planet      R (km)    mass (x 10^29 kg)\n    --------  --------  -------------------\n    Sun         696000           1.9891e+09\n    Earth         6371        5973.6\n    Moon          1737          73.5\n    Mars          3390         641.85\n\n\nlots of table formats, including\n\nsimple (Markdown extended)\ngithub (github flavored markdown)\npipe\njira\nmediawiki\nhtml\nplain (just spaces)\n\ndifferent column alignment options\nnumber formatting\n\nMichael #3: treebeard - ci for notebooks\n\nvia Brian Skinn\nContinuous Integration for binder-ready repos\nA solution for setting up continuous integration on data science projects requiring minimal configuration.\nFunctionality:\nAutomatically installs dependencies for binder-ready repos (which can use conda, pip, or pipenv)\nRuns notebooks in the repo (using papermill)\nUploads outputs, providing versioned URLs and nbcoverted output notebooks\nIntegrates with repos via a GitHub App\nSlack notifications\nA secret store for integrating with existing infrastructure\nA notebook that can run all code cells successfully will be tagged as successful. Treebeard shows a summary of all notebook statuses once execution is finished.\n\nBrian #4: Upcoming features in venv/virtualenv\n\nIn episode 184, we discussed how virtualenv and venv\nComing in Python 3.9, venv will get --upgrade-deps flag.\n\n`--upgrade-deps Upgrade core dependencies: pip setuptools to the             latest version in PyPI``\nIt\u2019s listed as being changed in 3.8, but it just missed 3.8 by a smidge and will have to wait until 3.9, which is available as beta now. Here\u2019s beta 3. \nAutomatically updates pip and setuptools in the new environment.\n\nvirtualenv is also getting a new goodie, periodic update.\n\nNot only does it create environments with updated setuptools, pip, wheel packages, it will periodically go out and check for updates to make sure it\u2019s ready for your next virtual environment.\nYou can also manually have it update, with the --upgrade-embed-wheels flag.\n\n\nMichael #5: PEP 582 now!\n\nvia Luiz Irber\nThis PEP proposes to add to Python a mechanism to automatically recognize a __pypackages__ directory and prefer importing packages installed in this location over user or global site-packages.\nHow virtual environments work is a lot of information for anyone new. It takes a lot of extra time and effort to explain them.\nDifferent platforms and shell environments require different sets of commands to activate the virtual environments.\nVirtual environments need to be activated on each opened terminal.\nTools like pip can be used to install the required dependencies directly into this directory.\nStill in draft mode but Python 3.8?\nhttps://github.com/David-OConnor/pyflow implements PEP 582\nUnfortunately requires everything running via pyflow for now.\n\nBrian #6: awesome pyproject.toml projects\n\n\u201cWe think pyproject.toml is pretty awesome, so this awesome list contains projects already using it, or discussing its inclusion.\u201d\nTesting and formatting apparently switched pretty quick\n\ncoverage.py\npytest\ntox\nward (new to me, no test names, test names are strings)\nblack\nisort\n\ncode analysis projects\n\npylint\nunimport\nwemake-python-styleguide\n\npackaging projects\nsome articles on pyproject.toml\nand a list of projects discussing the switch\nPython bytes awesome list\n\nExtras:\nBrian:\n\nnew website for Pragmatic\n\nMichael:\n\nCheck out our latest episode on pytest-plugins\nManaging Secrets and your Environment with 1Password\n\nJoke:\n\nSpouse: Stop by the store on the way home from work, \"Honey, please stop at the market and buy 1 bottle of milk. If they have eggs, bring 6\"\nMe: I came back with 6 bottles of milk.\nSpouse: \"Why the hell did you buy 6 bottles of milk? It's just the two of us!\"\nMe: \"Why do you think? Because they had eggs!\"\n"}
{"source": "Python Bytes 104\nSponsored by DigitalOcean: pythonbytes.fm/digitalocean\nMichael #0.1: Chapters and play at\n\nChapters are now in the mp3 file\nPlay at button on the website (doesn\u2019t work on iOS unless you click the play to start it)\n\nMichael #0.2: Become a friend of the show\n\nhttps://pythonbytes.fm/friends-of-the-show\nOr just click \u201cfriends of the show\u201d in the navbar\n\nBrian #1: wily: A Python application for tracking, reporting on timing and complexity in tests and applications.\n\nAnthony Shaw (aka \u201cFriend of the Show\u201d, aka \u201cAnt\u201d)\n(if listing 2 \u201caliases, do you just put one \u201caka\u201d or one per alias?)\nI should cover this on Test & Code for the content of the package. But it\u2019s the actual packaging that I want to talk about today.\nWily is a code base that can be used as an example of embracing pyproject.toml (pyproject.toml discussed on PB 100 and T&C 52)\nA real nice clean project using newer packaging tools that also has some frequently used bells and whistles\nNO setup.py file\nwily\u2019s pyproject.toml includes\n\nflit packaging, metadata, scripts \ntox configuration\nblack configuration\n\nproject also has \n\ntesting done on TravisCI\nrst based docs and readthedocs updates\ncode coverage\nblack pre-commit for wily\npre-commit hook for your project to run wily\nCONTRIBUTING.md that includes code of conduct\nHISTORY.md with a nice format\ntests using pytest\n\n\nMichael #2: Latest VS Code has Juypter support\n\nIn this release, closed a total of 49 issues, including:\n\nJupyter support: import notebooks and run code cells in a Python Interactive window\nUse new virtual environments without having to restart Visual Studio Code\nCode completions in the debug console window\nImproved completions in language server, including recognition of namedtuple, and generic types\n\nThe extension now contains new editor-centric interactive programming capabilities built on top of Jupyter.\nhave Jupyter installed in your environment (e.g. set your environment to Anaconda) and type #%% into a Python file to define a Cell. You will notice a \u201cRun Cell\u201d code lens will appear above the #%% line:\nCells in the Jupyter Notebook will be converted to cells in a Python file by adding #%% lines. You can run the cells to view the notebook output in Visual Studio code, including plots\n\nBrian #3: API Evolution the Right Way\n\nA. Jesse Jiryu Davis\nadding features\nremoving features\nadding parameters\nchanging behavior\n\nMichael #4: PySimpleGUI now on Qt\n\nProject by Mike B\nCovered back on https://pythonbytes.fm/episodes/show/90/a-django-async-roadmap\nSimple declarative UI \u201cbuilder\u201d\nLooking to take your Python code from the world of command lines and into the convenience of a GUI?\nHave a Raspberry Pi with a touchscreen that's going to waste because you don't have the time to learn a GUI SDK?\nLook no further, you've found your GUI package.\nNow supports Qt\nModern Python only\nMore frameworks likely coming\n\nBrian #5: Comparison of the 7 governance PEPs\n\nStarted by Victor Stinner\nThe different PEPs are compared by:\n\nhierarchy\nnumber of people involved\nrequirements for candidates to be considered for certain positions\nelections: who votes, and how\nterm limits\nno confidence vote\nteams/experts\nPEP process\ncore dev promotion and ejection\nhow governance will be updated\ncode of conduct\n\nPEP 8000, Python Language Governance Proposal Overview:\n\nPEP 8010 - The Technical Leader Governance Model\ncontinue status quo (ish)\nPEP 8011 - Python Governance Model Lead by Trio of Pythonistas\nlike status quo but with 3 co-leaders\nPEP 8012 - The Community Governance Model\nno central authority\nPEP 8013 - The External Governance Model\nnon-core oversight\nPEP 8014 - The Commons Governance Model\ncore oversight\nPEP 8015 - Organization of the Python community\npush most decision-making to teams\nPEP 8016 - The Steering Council Model\nbootstrap iterating on governance\n\n\nMichael #6: Shiboken (from Qt for Python project)\n\nFrom PySide2 (AKA Qt for Python) project\nGenerate Python bindings from arbitrary C/C++ code\nHas a Typesystem (based on XML) which allows modifying the obtained information to properly represent and manipulate the C++ classes into the Python World.\nCan remove and add methods to certain classes, and even modify the arguments of each function, which is really necessary when both C++ and Python collide and a decision needs to be made to properly handle the data structures or types.\nQt for Python: under the hood\nWrite your own Python bindings\nOther options include:\n\nCFFI (example dbader.org)\nCython (example:  via shamir.stav)\n\n\nExtras: \n\nMichael: Mission Python: Code a Space Adventure Game! book\nMichael: PyCon tickets are on sale\nMichael: PyCascade tickets are on sale\n"}
{"source": "Do you know or maybe work with people who abuse Excel? Is it their hammer to pound all the computational problems that get in their way? Well, join me to chat about this opportunity to bring Python deeper into their lives. You'll meet Chris Moffitt who runs Practical Business Python. He works with lots of folks who could make better use of Python to solve their business problems and he has a ton of material on his website. It's time to escape Excel hell with Python and Pandas.\n\nLinks from the show\n\nChris on Twitter: @chris1610\nPractical Business Python: pbpython.com\nChris' Excel Hell Presentation: Escaping-Excel-Hell-with-Python-and-Pandas.pdf\nThe Feynman Technique: The Best Way to Learn Anything: fs.blog\nFacebook\u2019s Prophet: github.com/facebook/prophet\nPython inside Excel at UserVoice: excel.uservoice.com\nSponsors\n\nLinode\nStellares Banner\nTalk Python Training"}
{"source": "Sponsored by DigitalOcean: pythonbytes.fm/digitalocean\nBrian #1: pyjanitor - for cleaning data\n\noriginally a port of an R package called janitor, now much more.\n\u201cpyjanitor\u2019s etymology has a two-fold relationship to \u201ccleanliness\u201d. Firstly, it\u2019s about extending Pandas with convenient data cleaning routines. Secondly, it\u2019s about providing a cleaner, method-chaining, verb-based API for common pandas routines.\u201d\nfunctionality:\n\nCleaning columns name (multi-indexes are possible!)\nRemoving empty rows and columns\nIdentifying duplicate entries\nEncoding columns as categorical\nSplitting your data into features and targets (for machine learning)\nAdding, removing, and renaming columns\nCoalesce multiple columns into a single column\nConvert excel date (serial format) into a Python datetime format\nExpand a single column that has delimited, categorical values into dummy-encoded variables\n\nThis pandas code:\n\n    df = pd.DataFrame(...)  # create a pandas DataFrame somehow.\n    del df['column1']  # delete a column from the dataframe.\n    df = df.dropna(subset=['column2', 'column3'])  # drop rows that have empty values in column 2 and 3.\n    df = df.rename({'column2': 'unicorns', 'column3': 'dragons'})  # rename column2 and column3\n    df['newcolumn'] = ['iterable', 'of', 'items']  # add a new column.\n- looks like this with pyjanitor:\n    df = (\n        pd.DataFrame(...)\n        .remove_columns(['column1'])\n        .dropna(subset=['column2', 'column3'])\n        .rename_column('column2', 'unicorns')\n        .rename_column('column3', 'dragons')\n        .add_column('newcolumn', ['iterable', 'of', 'items'])\n    )\n\nMichael #2: What Does It Take To Be An Expert At Python?\n\nPresentation at PyData 2017 by James Powell\nCovers Python Data Model (dunder methods)\nCovers uses of Metaclasses\nAll done very smoothly as a series of demos\nPretty long and in depth, 1.5+ hours\n\nBrian #3: Awesome Python Applications\n\npypi is a great place to find great packages you can use as examples for the packages you write. Where do you go for application examples? Well, now you can go to Awesome Python Applications.\ncategories of applications included:\ninternet, audio, video, graphics, games, productivity, organization, communication, education, science, CMS, ERP (enterprise resource planning), static site generators, and a whole slew of developer related applications.\nMahmoud is happy to have help filling this out, so if you know of a great open source application written in Python, go ahead and contribute to this, or open an issue on this project.\n\nMichael #4: Django Core no more\n\nWrite up by James Bennett\nIf you\u2019re not the sort of person who closely follows the internals of Django\u2019s development, you might not know there\u2019s a draft proposal to drastically change the project\u2019s governance.\nWhat\u2019s up: Django the open-source project is OK right now, but difficulty in recruiting and retaining enough active contributors.\nSome of the biggest open-source projects dodge this by having, effectively, corporate sponsorship of contributions.\nDjango has become sort of a victim of its own success: the types of easy bugfixes and small features that often are the path to growing new committers have mostly been done already in Django.\nNot managed to bring in new committers at a sufficient rate to replace those who\u2019ve become less active or even entirely inactive, and that\u2019s not sustainable for much longer.\nUnder-attracting women contributors too\nGovernance:  Some parallels to what the Python core devs are experiencing now. Project leads BDFLs stepped down.\nThe proposal: what I\u2019ve proposed is the dissolution of \u201cDjango core\u201d, and the revocation of almost all commit bits\n\nSeems extreme but they were working much more as a team with PRs, etc anyway.\nBreaks down the barrier to needing to be on the core team to suggest, change anything.\nTwo roles would be formalized \u2014 Mergers and Releasers \u2014 who would, respectively, merge pull requests into Django, and package/publish releases. But rather than being all-powerful decision-makers, these would be bureaucratic roles\n\n\nBrian #5: wemake django template\n\na cookie-cutter template for serious django projects with lots of fun goodies\n\u201cThis project is used to scaffold a django project structure. Just like django-admin.py startproject but better.\u201d\nfeatures:\n\nAlways up-to-date with the help of [@dependabot](https://dependabot.com/)\npoetry for managing dependencies\nmypy for optional static typing\npytest for unit testing\nflake8 and wemake-python-styleguide for linting\npre-commit hooks for consistent development\ndocker for development, testing, and production\nsphinx for documentation\nGitlab CI with full build, test, and deploy pipeline configured by default\nCaddy with https and http/2 turned on by default\n\n\nMichael #6: Django Hunter\n\nTool designed to help identify incorrectly configured Django applications that are exposing sensitive information.\nWhy? March 2018: 28,165 thousand django servers are exposed on the internet, many are showing secret API keys, database passwords, amazon AWS keys. \nExample: https://twitter.com/6IX7ine/status/978598496658960384\nSome complained this inferred Django was insecure and said it wasn\u2019t. Others thought \u201cThere is a reasonable argument to be made that DEBUG should default to False.\u201d\nOne beginner, Peter, chimes in:\n\nI probably have one of them, among my early projects that are on heroku and public GitHub repos. \nI did accidentally expose my aws password this way and all hell broke loose.\nThe problem is that as a beginner, it wasn't obvious to me how to separate development and production settings and keep production stuff out of my public repository.\n\n\nExtras:\nMichael: Thanks for having me on your show Brian: https://blog.michaelckennedy.net/2018/12/08/being-a-great-podcast-guest/\nBrian: open source extra:\nFor Christmas, I want a dragon\u2026\n\npic.twitter.com/RmFAEgqpSr\n  \u2014 Changelog (@changelog) \n\nMichael:  Why did the multithreaded chicken cross the road?\n\nroad the side get to the other of to\nto get the side to road the of other\nthe side of to the to road other get\nto of the road to side other the get\n"}
{"source": "As a software developer, what's the most important application on your computer? If your answer is Microsoft Outlook, my heart goes out to you - stay strong! But for most of us, it's probably a toss up between your web browser and code editor.  For editors, there are basically two camps: lightweight smart, text editors such as vim, emacs, and sublime text and heavy weight but highly functional IDEs such as PyDev and PyCharm. This week you'll meet Dmitry Trofimov who is one of the main developers behind one of my favorite editors: PyCharm.\n\n\nLinks from the show:\n\n\n\nJetBrains:  jetbrains.com\n\nPyCharm:  jetbrains.com/pycharm\n\n9 reasons you should be using PyCharm:  bit.ly/whypycharm\n\nDmitry on Twitter:  @dmitrytrofimov\n\n\nSponsors\n\nTalk Python Training"}
{"source": "Do you have stateless code that needs to run in the cloud? The clear answer years ago was to create and HTTP, or even, gasp! A SOAP service before then. While HTTP services are still very important, some of this code can move entirely away from the framework that runs it with serverless programming and hosted functions. \n\n\nOn this episode, I meet up with Asavari Tayal to discuss serverless programming in the cloud.\n\nLinks from the show\n\nAsavari on Twitter: @tayalasavari\nAzure functions on Twitter (really ;) ): @AzureFunctions\nAzure Functions: functions.azure.com\nSponsors\n\nCommand Line Heros\nDatadog\nTalk Python Training"}
{"source": "Sponsored by DigitalOcean: pythonbytes.fm/digitalocean\nMichael #1: Python in Production Hynek\n\nMissing a key part from the public Python discourse and I would like to help to change that.\nHynek was listening to a podcast about running Python services in production. \nDisagreed with some of the choices they made, it acutely reminded me about what I\u2019ve been missing in the past years from the public Python discourse.\nAnd yet despite the fact that the details aren\u2019t relevant to me, the mindsets, thought processes, and stories around it captivated me and I happily listened to it on my vacation.\nPython conferences were a lot more like this. I remember startups and established companies alike to talk about running Python in production, lessons learned, and so on. (Instagram and to a certain degree Spotify being notable exceptions)\nAn Offer: So in a completely egoistical move, I would like to encourage people who do interesting stuff with Python to run websites or some kind of web and network services to tell us about it at PyCons, meetups, and in blogs.\nDan Bader and I covered this back on Talk Python, episode 215.\n\nBrian #2: How to cheat at unit tests with pytest and Black\n\nSimon Willison\nPremise: \u201cIn pure test-driven development you write the tests first, and don\u2019t start on the implementation until you\u2019ve watched them fail.\u201d\ntoo slow, so \u2026, \u201ccheat\u201d\n\nwrite a pytest test that calls the function you are working on and compares the return value to something obviously wrong.\nwhen it fails, copy the actual output and paste it into your test\nnow it should pass\nrun black to reformat the huge return value to something manageable\n\nBrian\u2019s comments:\n\nThat\u2019s turning exploratory and manual testing into automated regression tests, not cheating.\nThere is no \u201cpure test-driven development\u201d, we still can\u2019t agree on what a unit is or if mocks are good or evil.\n\n\nMichael #3: Goodbye Microservices: From 100s of problem children to 1 superstar\n\nRetrospective by Alexandra Noonan\nJavascript but the lessons are cross language\nMicroservices is the architecture du jour\nSegment adopted this as a best practice early-on, which served us well in some cases, and, as you\u2019ll soon learn, not so well in others.\nMicroservices is a service-oriented software architecture in which server-side applications are constructed by combining many single-purpose, low-footprint network services.\nTouted benefits are improved modularity, reduced testing burden, better functional composition, environmental isolation, and development team autonomy.\nInstead of enabling us to move faster, the small team found themselves mired in exploding complexity. Essential benefits of this architecture became burdens. As our velocity plummeted, our defect rate exploded.\nHer post is the story of how we took a step back and embraced an approach that aligned well with our product requirements and needs of the team.\n\nBrian #4: Helium makes Selenium-Python 50% easier\nMichael #5: uncertainties package\n\nFrom Tim Head on upcoming Talk Python Binder episode.\nDo you know how uncertainty flows through calculations?\nExample:\n\n    Jane needs to calculate the volume of her pool, so that she knows how much water she'll need to fill it. She measures the length, width, and height:\n               length  L  =  5.56    +/-  0.14 meters\n                          =  5.56 m  +/-  2.5%\n\n               width   W  =  3.12    +/-  0.08 meters\n                          =  3.12 m  +/-  2.6%\n\n               depth   D  =  2.94    +/-  0.11 meters\n                          =  2.94 m  +/-  3.7%\n\nOne can find the percentage uncertainty in the result by adding together the percentage uncertainties in each individual measurement:\n        percentage uncertainty in volume =   (percentage uncertainty in L) +\n                                             (percentage uncertainty in W) +\n                                             (percentage uncertainty in D) \n\n                                         =  2.5% + 2.6% + 3.7% \n                                         =  8.8%\n\n\nWe don\u2019t want to deal with these manually! So we use the uncertainties package.\nExample of using the library:\n\n    >>> from uncertainties import ufloat\n    >>> from uncertainties.umath import *  # sin(), etc.\n    >>> x = ufloat(1, 0.1)  # x = 1+/-0.1\n    >>> print 2*x\n    2.00+/-0.20\n    >>> sin(2*x)  # In a Python shell, \"print\" is optional\n    0.9092974268256817+/-0.08322936730942848\n\nBrian #6: Personalize your python prompt\n\nArpit Bhayani\nThose three >>> in the interactive Python prompt. you can muck with those by changing sys.ps1\nFun.\nBut you can also implement dynamic behavior by creating class and putting code in the __str__ method. Very clever.\nnote to self: task for the day: reproduce the windows command prompt with directory listing and slashes in the other direction.\n\nExtras:\nMichael:\n\nNow that Python for Absolute Beginners is out, starting on a new course: Hybrid Data-Driven + CMS web apps.\n\nJoke: A Python Editor Limerick \n\nvia Alexander A.\n\nCODING ENVIRONMENT, IN THREE PARTS:\nTo this day, some prefer BBEdit.\nVSCode is now getting some credit.\nVim and Emacs are fine;\nso are Atom and Sublime.\nDoesn't matter much, if you don't let it.\nBut wait! Let's not forget IDEs!\nUsing PyCharm sure is a breeze!\nKomodo, Eclipse, and IDEA;\nCLion is my panacea,\nand XCode leaves me at ease.\nBut Jupyter Notebook is also legit!\nData scientists must prefer it.\nIn the browser, you code;\nresults are then showed.\nBut good luck when you try to use git."}
{"source": "Sponsored by DigitalOcean: pythonbytes.fm/digitalocean\nBrian #1: Solving Algorithmic Problems in Python with pytest\n\nAdam Johnson\nHow to utilize pytest to set up quick test cases for coding challenges, like Project Euler or Advent of Code.\nMoving the specification and examples in the challenge description into test cases.\nRunning the tests with a stub implementation and understanding the failure output.\nGradually building up a working solution.\nNice demo of how little code it takes to write quick test cases.\nAlso a cool idea to use challenge sites and platforms as TDD/test first practice, as well as practice converting specifications into test cases.\n\nMichael #2: DepHell -- project management for Python\n\nvia @dreigelb\nWhy it is better than all other tools:\n\nFormat agnostic. You can use DepHell with your favorite format: setup.py, requirements.txt, Pipfile, poetry. DepHell supports them all and much more.\nUse your favorite tool on any project. Want to install a poetry based project, but don't like poetry? Just say DepHell to convert project meta information into setup.py and install it with pip. Or directly work with the project from DepHell, because DepHell can do everything what you usually want to do with packages.\nDepHell doesn't try to replace your favorite tools. If you use poetry, you have to use poetry's file formats and commands. However, DepHell can be combined with any other tool or even combine all these tools together through formats converting. You can use DepHell, poetry and pip at the same time.\nEasily extendable. Pipfile should be just another one supported format for pip. However, pip is really old and big project with many bad decisions, so, PyPA team can't just add new features in pip without fear to broke everything. This is how pipenv has been created, but pipenv has inherited almost all problems of pip and isn't extendable too. DepHell has strong modularity and can be easily extended by new formats and commands.\nDevelopers friendly. We aren't going to place all our modules into [_internal](https://github.com/pypa/pip/tree/master/src/pip/_internal). Also, DepHell has big ecosystem with separated libraries to help you use some DepHell's parts without pain and big dependencies for your project.\nAll-in-one-solution. DepHell can manage dependencies, virtual environments, tests, CLI tools, packages, generate configs, show licenses for dependencies, make security audit, get downloads statistic from pypi, search packages and much more. None of your tools can do it all.\nSmart dependency resolution. Sometimes pip and pipenv can't lock your dependencies. Try to execute pipenv install oslo.utils==1.4.0. Pipenv can't handle it, but DepHell can: dephell deps add --from=Pipfile oslo.utils==1.4.0 to add new dependency and dephell deps convert --from=Pipfile --to=Pipfile.lock to lock it.\nAsyncio based. DepHell doesn't support Python 2.7, and that allows us to use modern features to make network and filesystem requests as fast as possible.\nMultiple environments. You can have as many environments for project as you want. Separate sphinx dependencies from your main and dev environment. Other tools like pipenv and poetry don't support it.\n\n\nBrian #3 Python rant: from foo import  is bad\n\nMike Croucher\nI\u2019m glad to see this post because I\u2019m still seeing this practice a lot, even in tutorial blog posts!\nThis is meaningless: result = sqrt(-1)\nIs it:  math.sqrt(-1)? or numpy.sqrt(-1) or cmath.sqrt(-1)? \n\nor scipy? or sympy?\n\nRecommendation:\n\nNever do from x import *\nUse import math\n\nor import numpy as np\nor even from scipy import sqrt \n\n\n\nMichael #4: Dask\n\nDask natively scales Python \nHave numpy, pandas, and scikit-learn code that needs to go faster?\nRun these on smart clusters of servers\nOr just on your laptop\nProcess more data than will fit into RAM\nSupported by\u2026 interesting to see proper support there.\nMatthew Rocklin was on Talk Python 207 to discuss\n\nBrian #5: Animations with Matplotlib\n\nParul Pandey\nThe raindrop simulation is mesmerizing. \nTutorial on using FuncAnimation to animate a sine wave\n\nalthough, I\u2019m not sure what the x axis means during an animation\n\nAlso:\n\nlive updates based on changing data\nanimate turning a 3D plot\nusing celluloid package to animate\n\nsimple example\nanimating subplots\nchanging legend during animation\n\n\n\nMichael #6: PEP 554 -- Multiple Interpreters in the Stdlib\n\nThis proposal introduces the stdlib interpreters module. The module will be provisional. It exposes the basic functionality of subinterpreters already provided by the C-API, along with new (basic) functionality for sharing data between interpreters.\nSharing data centers around \"channels\", which are similar to queues and pipes.\nExamples and use-cases:\n\nRunning isolated code\nIn process, true parallelism \nVersioning of modules (?)\nPlugin systems\n\n\nExtras\nMichael:\n\niOS Talk Python Training app is out: training.talkpython.fm/apps\nFind us at PyCon!\nBlessings terminal API (from Erik Rose, via Prayson Daniel)\n\nJokes\nvia Topher Chung\n\nKnock knock.\nRace condition.\nWho's there?\n"}
{"source": "Do you have a dirty, messy data problem? Whether you work as a software developer or as a data scientist, you've surely run across data that was malformed, incomplete, or maybe even wrong. Don't let messy data wreck your apps or generate wrong results. \n\n\nWhat should you do? Listen to this episode of Talk Python To Me with Katharine Jarmul about the book she co-authored called Data Wrangling with Python and her PyCon UK presentation entitled How to Automate your Data Cleanup with Python.\n\n\nLinks from the show:\n\n\n\nKatharine on the web:  kjamistan.com\n\nKatharine on twitter:  @kjam\n\nBook: Data Wrangling with Python: Tips and Tools to Make Your Life Easier:  amzn.to/2fGc0Cx\n\nPycon 2016: How to Automate your Data Cleanup with Python:  youtube.com/watch?v=gp-ngPV_ZX8\n\n\nPackages from Data Cleanup talk\n\nDedupe Python Library:  github.com/datamade/dedupe\n\nprobablepeople:  github.com/datamade/probablepeople\n\nusaddress:  github.com/datamade/usaddress\n\njellyfish:  github.com/jamesturk/jellyfish\n\nFuzzywuzzy:  github.com/seatgeek/fuzzywuzzy\n\nscrubadub:  github.com/datascopeanalytics/scrubadub\n\npint:  pint.readthedocs.io\n\narrow:  github.com/crsmithdev/arrow\n\npdftables.six:  github.com/vnaydionov/pdftables\n\nDatacleaner:  github.com/rhiever/datacleaner\n\nParserator:  github.com/datamade/parserator\n\nGensim:  radimrehurek.com/gensim\n\nFaker:  github.com/joke2k/faker\n\nDask:  dask.pydata.org\n\nSpaCy:  spacy.io\n\nAirflow:  airflow.incubator.apache.org\n\nLuigi:  luigi.readthedocs.io\n\nHypothesis (testing):  hypothesis.works\n\n\nKatharine's courses\n\n\nData Pipelines with Python\n\nshop.oreilly.com/product/0636920055334.do\n\nData Wrangling & Analysis with Python. Learn Pandas\n\nshop.oreilly.com/product/0636920051831.do\n\n\nSponsors\n\nRollbar:  rollbar.com/talkpythontome\n\nGoCD:  go.cd\n\n\nSponsors\n\nRollbar\nGoCD\nTalk Python Training"}
{"source": "We have guest hosts filling in for  Michael while he is on vacation.  This week we have Eric Chou, author of the book \u201cMastering Python Networking\u201d and a self-proclaimed Network Automation Nerd. \nEric #1: DevOps Automation Tool: Ansible\n\nDevOps Automation framework written in Python, code hosted on GitHub.\nTop 10 OpenSource projects in 2014 by OpenSource.com, along with Docker, Kubernetes, Apache Hadoop, OpenStack, and OpenDaylight, etc. \nExcellent documentation for all modules. \nAgentless, \u2018networking vendor\u2019 friendly, execute code locally that interacts with the device via SSH and API. \nLots of Network modules, including Cisco, Juniper, Arista, etc. In fact, you can find Cisco and Juniper testimonial on the Ansible site.  \nEasy to learn and extend if you already know a little bit about Python, YAML, and Jinja2. \n\nBrian #2: Python Practices for Efficient Code: Performance, Memory, and Usability\n(I\u2019m too opinionated to leave out my thoughts when covering this article, even though it\u2019s very well written and I mean no disrespect to Satwik Kansal)\n\nTry not to blow off memory\n\nuse generators to calculate large sets of results\nfor big number crunching, use numpy\nUse format instead of + for large strings. (or f-strings - Brian)\nUse slots for classes (psshh, use attrs - Brian)\n\nPython 2 or 3\n\nWrite code compatible with both. (disagree, use 3 unless you can\u2019t for a very good reason, then write code that\u2019s easy to convert to 3 later. - Brian)\n\nWrite Beautiful code because \u201cThe first impression is the last impression.\"\n\nfollow style guides\nuse static analysis tools. Recommended using something called coala that\u2019s installed as \u201ccoala-bears.\n(Brian: Maintenance cost is a real thing. Make your code look good because it\u2019s cheaper in the long run. Use pycodestyle, pydocstyle, flake8, and if using sublime, use Flake8Lint) \n\nSpeed up your performance\n\nMultiprocess, not Multi-thread\n\nAnalyzing your code\n\nUse cProfile, memory_profiler, objgraph, resource\n\nTesting and CI\n\nnose or pytest  or doctest\n(Brian: BTW, I really appreciate the links to pythontesting.net for tutorials on these.)\n(Brian: No. Use pytest)\nmeasure coverage and and try for 100%\n(Brian: No. use coverage to be alerted of sudden changes, and of code that possibly needs more testing and/or deleted)\n\n\nEric #3: Packet Manipulation Program: Scapy\n\nFree Python-based interactive packet manipulation program and library, GitHub. \nCraft the packet from the ground up, you can use it to decode packets or craft packets. \nYou are in control instead of limited to what the creator of the tool can imagine, i.e. hping3, curl. \nCan be used together with the Python interpreter. \nParticularly useful for network security\n\nCrafting common attacks: malformed packets (such as IP version 3), Ping of Death (large paylaod), Land Attack (redirect the client response back to the client itself) for denial-of-service. \nPenetration Testing (TCP port scan) and Fuzzing by providing invalid, unexpected, or random data.  \n\n\nBrian #4: Using Headless Chrome with Selenium\n\nMiguel Grinberg quick demo of using headless chrome with selenium and unittest.\n(Brian: Eventually I\u2019ll get Miguel to use pytest more.)\nReplace the normal Firefox with Chrome in the webdriver of Selenium, and passing a \u2018headless\u2019 argument to make it so the window doesn\u2019t keep popping up and down when testing.\n\nEric #5: Graph Visualization with Graphviz\n\nOpen Source graph visualization software.  \nPerfect for graphing the large datacenter topology automatically or any other network diagrams. \nExtensive documentation and gallery of examples.  \nDid I mention this is \u2018automatible\u2019? Thus avoid drifts between reality and actual network. \nPython package graphviz (lower case g) for Graphviz integration. \n\nBrian #6: PyCascades CFP still open until the 28th\n\nPython conference in Vancouver, BC.\nTalks Jan 22, 23, Sprints Jan 24th\nSpeakers get free admission. Talks are all 25 min slots. No Q&A after talks in front of full audience, but speakers will hang out up front for a few minutes for individual questions\nI\u2019m going to submit at least one proposal. But I\u2019m kinda swamped this week, so the proposal will unfortunately be rushed.\n\nExtra Eric:\n\nMastering Python Networking book \nNetwork Labs: Cisco Virtual Internet Routing Lab (VIRL), Cisco DevNet, GNS3 (Graphic Network Simulator). \n\nExtra Brian:\n\nCopy editing and final testing with most recent Python and pytest done for Python Testing with pytest\n"}
{"source": "Do your applications call a lot of APIs? Maybe you have a bunch of microservices driving your app. You probably don't have the crazy combinatorial explosion that Zapier does for connecting APIs! They have millions of users automating things with 1,000s of APIs. It's pretty crazy. And they are doing it all with Python. Join me and Bryan Helmig, the CTO and co-founder of Zapier as we discuss how they pull this off with Python.\n\nLinks from the show\n\nZapier: zapier.com\nBryan on Twitter: @bryanhelmig\nJobs at Zapier: zapier.com/jobs\nSponsors\n\nLinode\nTing\nTalk Python Training"}
{"source": "The Python landscape is changing pretty dramatically. Python's rapid growth over the past 5 years means it doesn't look the same as the early days. On this episode, we take a deep look inside the state of the Python ecosystem with Ewa Jodlowska and Dmitry Filippov. They lead the PSF and JetBrains Python survey. And they are here to dig into the results.\n\nLinks from the show\n\nEwa on Twitter: @ewa_jodlowska\nDmitry on Twitter: @filippovdmitry\n\nSurvey Results: jb.gg/pythondevsurvey2017\nPyCon 2018 presentation: youtube.com\nSurvey Feedback: surveys@python.org\nIssue tracker on GitHub: github.com\nSponsors\n\nLinode\nBrilliant\nTalk Python Training"}
{"source": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 13, recorded on February 13, 2017. In this episode we discuss Python making the move to GitHub and Dropbox stepping back from Pyston.  \nThis episode was brought to you by Metis: The Data Science Bootcamp company.\n#1 Brian:Pyston no longer sponsored by Dropbox\nPersonal follow up post by Kevin Modzelewski\nhttp://blog.kevmod.com/2017/02/personal-thoughts-about-pystons-outcome/\n\nPyston (pronounced piston) is a Python JIT implementation started at Dropbox\nIt was based on CPython and supported a bunch of 2.7, but wasn\u2019t complete.\nBottom line: It\u2019s open source, and the repo will be left for whoever wants to work on it. But the core developers from Dropbox won\u2019t be working on it, and Dropbox won\u2019t be spending any more time/money on it.\n\n#2 Michael: CPython is coming to GitHub\n\nMailing list announcment: https://mail.python.org/pipermail/python-dev/2017-February/147341.html\nReddit discussion https://www.reddit.com/r/Python/comments/5ssx9w/cpython_moves_to_github_this_friday/\n\nBrett Cannon\u2019s excellent background story: https://snarky.ca/the-history-behind-the-decision-to-move-python-to-github/\n\nInteresting that some people (voiced via reddit) sadness about leaving Hg\u2026\n2006: Python moves to SVN\n2011: Python moves to Hg\n2017: Python moves to GitHub\nBy 2014 it had become obvious to some of us that the Python development process had in fact become a burden. The rate at which patches were being submitted was much greater than the rate at which they were being reviewed. This was leading to external contributors getting frustrated because they would put in the effort to write a patch but would occasionally end up with waiting years for a review from a core developer.\nI wanted was the ability to review an external contribution -- from submission to commit -- all on a tablet while at a beach with WiFi (which I actually have in Vancouver so this wasn't entirely a silly request). My thinking was that if we got the process to be that simple, core developers could do a review at lunch time while at work, or when they had some down time at home without having to be on some special machine that had their SSH keys installed on it.\n\n#3 Brian: Using functional programming in Python like a boss: Generators, Iterators and Decorators\n\nI\u2019m liking the trend of more Jupiter notebook based articles. This one is a pretty gentle introduction into functions, generators, iterators, decorators, containers, and how they all work together to make your code more expressive.\n\n#4 Michael: It's metaclasses all the way down\n\nWhat is metaprogramming? Metaprogramming is a technique of writing computer programs that can treat themselves as data, so you can introspect, generate, and/or modify them while running\nMetaclasses are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don\u2019t (Tim Peters)\nHowever: The potential uses for metaclasses are boundless. Some ideas that have been explored include logging, interface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource locking/synchronization. \nNice examples: \n\nDjango ORM models\nAbstract vehicle class\n\n\n#5 Brian: Lambda Functions in Python: What Are They Good For?\n\nLambdas are part of the language, and if used sparingly and in the right context, can make your code more readable. It\u2019s super important for intermediate and experienced Python folks to understand lambdas and not be afraid of them.\nThis article is a good tutorial on them.\nWhen you finally grok them, you might be tempted to use them all over the place. Dan presents a couple of places where using lambdas is a bad choice:\n\ncreating class methods. Definitions are definitely preferred over assigning lambdas to attributes. \ngenerating a list with list(fliter([HTML_REMOVED], [HTML_REMOVED])) . I agree with Dan that comprehensions are way easier to read.\n\n\n#6 Michael: Multi-threaded SQLite without the OperationalErrors\n\nUnless you are very diligent about keeping your write transactions as short as possible, you can easily wind up with one thread accidentally holding a write transaction open for an unnecessarily long time. \nI've had success using a very simple approach: I eliminate the possibility of lock contention by dedicating one thread to the task of issuing all writes for the application.\nThe entire source listing can be found here, if you're curious: https://github.com/coleifer/peewee/blob/master/playhouse/sqliteq.py\n\nFollowup: Japronto not production ready:\n\u201cJapronto author here: As stated in the README you should not build anything serious with Japronto now because it's gonna probably eat your laundry. Remember it's hand coded in C and this needs a lot of testing. On the top of that I plan to do several iterations of API changes in a largely incompatible ways. I hope though it's gonna make a serious player in the field one day.\nIf you wanna a decent async framework then go with aiohttp or Sanic. If you are gonna do typical REST app frontend to a database go with Flask or Pyramid. If you need a scaffolded admin go with Django.\u201d"}
{"source": "The blockchain and cryptocurrencies are some of the most disruptive technologies of the decade. On this episode, you'll meet Stuart Farmer who is building a suite of developer tools that speed up the process of creating new and custom blockchains and apps.\n\nLinks from the show\n\nLamden: lamden.io\nLamden on GitHub: github.com/Lamden\nLamden on Twitter: @lamdentau\n\nRelated articles\nPlattsburgh has become the first city in the US to ban cryptocurrency mining: theverge.com\nSome Blockchain Startups: hackernoon.com\n\nSponsors\nLinode: linode.com\nNerdlettering: nerdlettering.com\nTalk Python Courses: training.talkpython.fm\nSponsors\n\nLinode\nNerd Lettering\nTalk Python Training"}
